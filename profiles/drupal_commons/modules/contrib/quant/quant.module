<?php

// Date formats
define('QUANT_DATE_DAY_FORMAT', 'M j'); // Month Day (Feb 12)
define('QUANT_DATE_MONTH_FORMAT', 'M y'); // Month Year (Jun 09) 

// Number of allowed colors
define('QUANT_PALETTE_AMOUNT', 25);

// Include chart building function
require_once('quant.chart.inc');

/**
 * Implementation of hook_perm()
 */
function quant_perm() {
  return array('administer quant', 'view analytics page'); 
}

/**
 * Implementation of hook_menu()
 */
function quant_menu() {
  $items = array();
 
  // Main analytics page
  $items['analytics'] = array(
    'title' => 'Site analytics',
    'page callback' => 'quant_page',
    'access arguments' => array('view analytics page'),
    'type' => MENU_CALLBACK,
    'file' => 'quant.forms.inc',
  );
  
  // Also provide an analytics link in the admin reports
  $items['admin/reports/analytics'] = array(
    'title' => 'Site analytics',
    'description' => 'View charts depicting action over time for many Drupal components.',
    'page callback' => 'quant_page',
    'access arguments' => array('view analytics page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'quant.forms.inc',
  );
  
  // Settings page
  $items['admin/settings/quant'] = array(
    'title' => 'Quant configuration (analytics)',
    'description' => 'Configure the quantitative analytics page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('quant_admin_settings'),
    'access arguments' => array('administer site quant'),
    'file' => 'quant.forms.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  
  return $items;
}

/**
 * The analytics page callback
 */
function quant_page() {
  // Get time period or interval
  $period = quant_get_time_from_url();
  
  // Fetch all available quants
  if ($period) {
    $quants = quant_get();
    foreach ($quants as $quant) {
      // Check to see if this quant should be shown
      if ($allowed = variable_get('quant_visible', 0)) {
        if (!$allowed[$quant->id]) {
          continue;
        }
      }
      // Process the quant
      $charts[] = quant_process($quant, $period);
    }
  }
  else {
    drupal_set_message(t('Invalid timeframe arguments provided.'), 'error');
  }

  // Add externals
  drupal_add_css(drupal_get_path('module', 'quant') . '/quant.css');
  
  // Theme and return the page
  return theme('quant_page', drupal_get_form('quant_time_form'), $charts);
}

/**
 * Retrieve the time period or interval from the URL
 * 
 * @param $period
 *   If the set option is a period, the return value will
 *   be a single timestamp representing how far to go back
 *   in time from the current. If the set option is custom,
 *   the return value will be an array representing a given
 *   time interval. The first value will be the "from" timestamp
 *   and the second value will be the "to" timestamp. If neither
 *   can be determined, FALSE will be returned. If no queries are
 *   in the URL, a timestamp for a 1 month period will be returned.
 */
function quant_get_time_from_url() {
  // Get the option
  switch ($_GET['option']) {
    case '':
      return strtotime('-1 month');
      
    case 'custom':
      $from = strtotime($_GET['from']);
      $to = strtotime($_GET['to']);
      if (is_numeric($from) && is_numeric($to)) {
        // Move the 'to' date to 1 second before midnight
        return array($from, $to + 86399);
      }
      break;
    
    case 'period':
      $period = strtotime('-' . str_replace('_', ' ', filter_xss($_GET['period'])));
      if (is_numeric($period)) {
        return $period; 
      }
  }
  
  return FALSE;
}

/**
 * Process quants and convert them to charts with data plotted
 * 
 * @param $quant
 *   A quant object
 * @param $period
 *   A timestamp representing a date in which data should reach back to, 
 *   can also be an accepted format for strtotime(), or an array with
 *   the first value being a timestamp representing the 'from' date
 *   and the second value being a timestamp representing the 'to' date.
 *   If an array of two values is given, accept formats for strtotime()
 *   can be used in place of timestamps.
 * @return
 *   A complete chart ready for display
 */
function quant_process($quant, $period) {
  $chart = '';
  
  // Check if period is in string form
  if (is_string($period)) {
    // Convert to a timestamp
    $period = strtotime($period);
    
    // Make sure the format was correct
    if (!is_numeric($period)) {
      return FALSE; 
    }
  }
  // Check if period is numeric
  else if (is_numeric($period)) {
    // Determine the amount of days in period
    $days = ceil((time() - $period) / 86400);
  }
  // Check if period is an array
  else if (is_array($period)) {
    // Check if the values are strings
    foreach ($period as $i => $date) {
      if (is_string($date)) {
        // If they are, try to convert to timestamps
        $date = strtotime($date);
        if (!is_numeric($date)) {
          // Invalid format, end here
          return FALSE;
        }
        else {
          $period[$i] = $date; 
        }
      }
    }
    
    // Determine the amount of days in period
    $days = ceil(($period[1] - $period[0]) / 86400);
  }

  switch ($quant->dataType) {
    case 'single':
      $items = quant_db_time($quant, $period);
      $items = quant_generate_time($items, $quant->field, $days, $period);
      $chart = quant_init_chart($quant, $items);
      $chart = quant_chart_time($chart, $quant, $items);
      break;
    case 'multiple':
      $items = quant_db_time($quant, $period);
      $items = quant_generate_time_multi($items, $quant->field, $quant->group, $days, $period);
      $chart = quant_init_chart($quant, $items);
      $chart = quant_chart_time_multi($chart, $quant, $items);
      break;
    case 'count':
      $items = quant_db_count($quant, $period);
      $items = quant_generate_count($items, $quant->count);
      $chart = quant_init_chart($quant, $items);
      $chart = quant_chart_count($chart, $quant, $items);
      break;
  }
    
  return $chart ? $chart : FALSE;
}

/**
 * Perform a database query based on quant data for calculating
 * time-based trends
 * 
 * @param quant
 *   A quant object
 * @param $period
 *   A timestamp which to return items older than, or an array with
 *   a 'from' and 'to' timestamp.
 * @return
 *   An executed database query
 */
function quant_db_time($quant, $period) {
  // Generate if a query wasn't supplied
  if (!$quant->query) {
    $query = "SELECT $quant->field FROM {{$quant->table}} ";
    $query .= "WHERE $quant->field >= %d" . (is_array($period) ? " AND $quant->field <= %d " : " "); 
    $query .= "ORDER BY $quant->field DESC";
  }
  else {
    $query = is_array($period) ? $quant->queryCustom : $quant->query;
  }
  
  return is_array($period) ? db_query($query, $period[0], $period[1]) : db_query($query, $period);
}

/**
 * Perform a database query based on quant data for calculating
 * counts
 * 
 * @param quant
 *   A quant object
 * @param $period
 *   A timestamp which to return items older than, or an array with
 *   a 'from' and 'to' timestamp.
 * @return
 *   An executed database query
 */
function quant_db_count($quant, $period) {
  // Generate if a query wasn't supplied
  if (!$quant->query) {
    $query = "SELECT COUNT($quant->count), $quant->count FROM {{$quant->table}} ";
    $query .= "WHERE $quant->field >= %d" . (is_array($period) ? " AND $quant->field <= %d " : " "); 
    $query .= "GROUP BY $quant->count";
  }
  else {
    $query = is_array($period) ? $quant->queryCustom : $quant->query;
  }
  
  return is_array($period) ? db_query($query, $period[0], $period[1]) : db_query($query, $period);
}

/**
 * Fetch all available quants
 */
function quant_get() {
  return module_invoke_all('quants');
}

/**
 * Wrapper for hook_quants()
 */
function quant_quants() {
  module_load_include('inc', 'quant', 'quant.quants');
  return _quant_quants(); 
}

/**
 * Generate chart data for a multiple data point over
 * a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the timestamp
 * @param $group
 *   The database field name to group items on
 * @param $days
 *   How many days back should the data be generated for
 * @param $period
 *   A timestamp which to return items older than, or an array with
 *   a 'from' and 'to' timestamp.
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_time_multi($items, $field, $group, $days, $period) {
  $data = array();
  // Determine when the starting time is
  $start = is_array($period) ? $period[1] : time();
  // The date() format to use. We compare by month if there are more than 96 days.
  $format = ($days > 75) ? QUANT_DATE_MONTH_FORMAT : QUANT_DATE_DAY_FORMAT;
  // Whether or not to jump by day or month
  $interval = ($days > 75) ? 2629743 : 86400;
  // Possibly convert days to months
  $steps = ($days > 75) ? ($days / 30) : $days;
  
  // Place the items into an array for initial grouping by $group
  // For example: $data['page'] = array('May 10', 'May 18');
  while ($item = db_fetch_object($items)) {
    $data[$item->$group][] = date($format, $item->$field);
  }
  
  // Iterate through each group of items and calculate the amount of
  // items for each time period
  foreach ($data as $type => $values) {
    // Create a new array that's preformatted with a key for
    // every single time period
    $dates[$type] = quant_build_date_array($start, $steps, $interval, $format);

    // Increment for each time period
    foreach ($values as $value) {
      if (isset($dates[$type][$value])) {
        $dates[$type][$value]++;
      }
    }
    
    // Set in ascending order
    $dates[$type] = array_reverse($dates[$type]);
  }
  
  return $dates;
}

/**
 * Generate chart data for a singular data point across
 * a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the timestamp
 * @param $days
 *   How many days back should the data be generated for
 * @param $period
 *   A timestamp which to return items older than, or an array with
 *   a 'from' and 'to' timestamp.
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_time($items, $field, $days, $period) {
  // Determine when the starting time is
  $start = is_array($period) ? $period[1] : time();
  // The date() format to use. We compare by month if there are more than 183 days.
  $format = ($days > 183) ? QUANT_DATE_MONTH_FORMAT : QUANT_DATE_DAY_FORMAT;
  // Whether or not to jump by day or month
  $interval = ($days > 183) ? 2629743 : 86400;
  // Possibly convert days to months
  $steps = ($days > 183) ? ($days / 30) : $days;

  // Create a new array that's preformatted with a key for
  // every single time period
  $dates = quant_build_date_array($start, $steps, $interval, $format); 
 
  // Calculate the amount of occurrences per time period
  while ($item = db_fetch_object($items)) {
    if (isset($dates[date($format, $item->$field)])) {
      $dates[date($format, $item->$field)]++;
    }
  }
  
  // Set in ascending order
  $dates = array_reverse($dates);
  
  return $dates;
}

/**
 * Build the date array for charts to fill plotted data on
 * 
 * @param $start
 *   A timestamp representing the day to begin
 * @param $steps
 *   The number of steps (days/months) to go back
 * @param $interval
 *   A numeric value representing the step size in seconds
 * @param $format
 *   The date format to be used in date()
 * @return
 *   An array keyed with the date formatted by format. All values are 
 *   initially set to 0.
 */
function quant_build_date_array($start, $steps, $interval, $format) {
  $dates = array();
  for ($i = 0; $i < $steps; $i++) {
    $dates[date($format, $start)] = 0;
    $start -= $interval; // Backtrack a period
  }
  return $dates;
}

/**
 * Generate chart data for an aggregate (count) data point 
 * across a time period
 * 
 * @param $items
 *   Items resulting from a database query
 * @param $field
 *   The database field name that stores the type to count
 * @return
 *   A formatted array to be passed into a chart
 */
function quant_generate_count($items, $field) {
  $data = array();
  
  while($item = db_fetch_array($items)) {
    $data[$item[$field]] = $item['COUNT(' . $field . ')']; 
  }
  
  return $data;
}

/**
 * Take formatted data for a count chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_count($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  
  foreach ($data as $key => $value) {
    $chart['#data'][] = $value;
    
    // If pie chart, let's add the numeric value to the label
    if ($quant->chartType == 'pie') {
      quant_x_label($chart, $key . ' (' . $value . ')');
    }
    else {
      quant_x_label($chart, $key);
    }
    
    $max = max($max, $value);
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/**
 * Take formatted data for a single-point chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_time($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  $interval = 0; // Counter to help break the x-axis label
  $period = ceil(count($data) / 10); // Period when to break x-axis

  foreach ($data as $date => $value) {
    // Only show the X label every calculated period
    if(!$interval) {
      quant_x_label($chart, $date);
      $interval = $period;
    }
    $chart['#data'][] = $value;
    $max = max($max, $value);
    $interval--;
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/**
 * Take formatted data for a multi-point chart and convert to 
 * a format that the charts can understand
 * 
 * @param $quant
 *   A quant object
 * @param $data
 *   An array of data generated by a quant_generate function
 * @return
 *   A generated chart
 */
function quant_chart_time_multi($chart, $quant, $data) {
  $max = 0; // Determine the highest available value on y-axis
  $interval = 0; // Counter to help break the x-axis label
  $x = FALSE; // Only register the x-axis labels once
  
  foreach ($data as $type => $values) {
    // Set type as a legend
    $chart['#legends'][] = $type; 
    // Period when to break x-axis
    $period = ceil(count($data[$type]) / 10);
    
    foreach ($values as $date => $value) {
      $chart['#data'][$type][] = $value;
      $max = max($max, $value);
      
      if (!$x) { // Only set x-axis labels once
        if(!$interval) {
          quant_x_label($chart, $date);
          $interval = $period;
        }
        $interval--;
      }
    }
    
    $x = TRUE; // x-axis labels have been set
  }
  
  quant_y_range($chart, 0, $max);

  return chart_render($chart);
}

/*** THEME ***/

function quant_theme() {
  return array(
    'quant_page' => array(),
    'quant_time_form' => array(
      'arguments' => array('form' => NULL),
      'file' => 'quant.forms.inc',
    ),
  ); 
}

function theme_quant_page($form, $charts) {
  $content = '';
  $content .= $form;
  if ($charts) {
    foreach ($charts as $chart) {
      $content .= $chart;
    }
  }
  return '<div id="quant-page">' . $content . '</div>';
}
