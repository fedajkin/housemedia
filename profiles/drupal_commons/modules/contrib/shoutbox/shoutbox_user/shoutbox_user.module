<?php
// $Id: shoutbox_user.module,v 1.1.2.3 2010/12/08 00:38:10 mikestefff Exp $

/**
 * Implementation of hook_menu()
 */
function shoutbox_user_menu() {
  return array(
    'shoutbox/user/%user' => array(
      'title' => 'Shout box',
      'page callback' => 'shoutbox_user_page',
      'page arguments' => array(2),
      'access callback' => 'shoutbox_user_access',
      'description' => 'A dedicated shoutbox page for group shouts.',
      'type' => MENU_CALLBACK,
    ),
    'shoutbox/user/%/js/view' => array(
      'title' => 'Shout tag',
      'page callback' => 'shoutbox_user_js_view',
      'page arguments' => array(2),
      'access callback' => 'shoutbox_user_access',
      'description' => 'Javascript callback for viewing a user\'s shouts',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Page callback for user shoutbox page
 */
function shoutbox_user_page($user) {
  // Set the title with the user's name
  drupal_set_title(t('!name\'s shout box', array('!name' => l($user->name, "user/{$user->uid}"))));
  
  // Return normal shoutbox page
  return shoutbox_view(); 
}

/**
 * Access callback for user shouts
 */
function shoutbox_user_access() {
  if (user_access('view shouts') && user_access('access user profiles')) {
    return TRUE; 
  }
  
  return FALSE;
}

/**
 * Implementation of hook_shoutbox()
 */
function shoutbox_user_shoutbox($op, &$shout, &$a1 = NULL, $form_state = NULL) {
  switch ($op) {
    case 'insert':
      // Determine if the shout was added for a user
      if ($uid = $form_state['values']['uid']) {
        shoutbox_user_save($shout, $uid);
      }
      break;
      
    case 'presave':
      // Determine if the shout was added for a user
      if ($uid = $form_state['values']['uid']) {
        // Tag this shout as belonging to this module
        $shout->module = 'shoutbox_user';
      }
      
    case 'delete':
      // Remove any tag references to this shout
      db_query("DELETE FROM {shoutbox_user} WHERE shout_id = %d", $shout->shout_id);  
      break;
      
    case 'query':
      // If we're viewing a tag, only returned shouts that have the tag
      if ($uid = shoutbox_user_get_current_user()) {
        $a1 = "
          SELECT s.* FROM {shoutbox} s 
          INNER JOIN {shoutbox_user} u 
          ON s.shout_id = u.shout_id 
          WHERE u.uid = {$uid}
          ORDER BY s.created DESC
          ";
      }
      break;
    
    case 'js path':
      // Alter the js update path so only shouts with the given
      // tag are shown
      if ($uid = shoutbox_user_get_current_user()) {
        $a1 = "shoutbox/user/{$uid}/js/view/";
      }
      break;
      
    case 'form':
      // Remove the shout form if we're viewing a tag
      if ($uid = shoutbox_user_get_current_user()) {
        $a1['uid'] = array(
          '#type' => 'value',
          '#value' => $uid,
        );
      }
      break;
      
    case 'link':
      if ($uid = shoutbox_user_get_current_user()) {
        $a1 = "shoutbox/user/$uid";  
      }
      break;
  }
}

/**
 * Determine if we're viewing a suser
 * 
 * @return
 *   The user id being viewed, otherwise FALSE is we're not viewing one
 */
function shoutbox_user_get_current_user() {
  // Detect user/%uid
  if (arg(0) == 'user' && is_numeric(arg(1))) {
    return arg(1); 
  }
  else if (arg(0) == 'shoutbox' && arg(1) == 'user' && is_numeric(arg(2))) {
    return arg(2); 
  }
  return FALSE;
}

/**
 * Save a shout for a given user
 *
 * @param $shout
 *   A shout object
 * @param $user
 *   The user, or uid, whom the shout is directed towards
 */
function shoutbox_user_save($shout, $user) {
  $record = new stdClass;
  $record->shout_id = $shout->shout_id;
  $record->uid = is_object($user) ? $user->uid : $user;
  drupal_write_record('shoutbox_user', $record);
}

/**
 * Javascript callback for viewing shouts for a given tag
 */
function shoutbox_user_js_view($user) {
  // This callback is only needed to keep the
  // URL like shoutbox/user/%uid so the query gets altered
  shoutbox_js_view();
}
