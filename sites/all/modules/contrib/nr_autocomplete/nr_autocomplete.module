<?php 

/**
 * @file
 * Nodereference autocomplete widget module file
 */

/**
 * Implementation of hook_menu().
 */
function nr_autocomplete_menu() {
  $items = array();
  $items['nr_autocomplete/autocomplete'] = array(
    'title' => 'Enhanced Nodereference Autocomplete',
    'page callback' => 'nr_autocomplete_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of hook_theme().
 */
function nr_autocomplete_theme() {
  return array(
    'nr_autocomplete' => array('arguments' => array('element' => NULL)),
  );
}

/**
 * Implementation of hook_widget_info().
 */
function nr_autocomplete_widget_info() {
  return array(
    'nr_autocomplete' => array(
      'label' => t('Enhanced Nodereference Autocomplete'),
      'field types' => array('nodereference'),
      'multiple values' => CONTENT_HANDLE_MODULE,
      'callbacks' => array(
        'default value' => CONTENT_CALLBACK_DEFAULT,
      ),
    ),
  );
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function nr_autocomplete_elements() {
  return array(
    'nr_autocomplete' => array(
      '#input' => TRUE,
      '#columns' => array('name'),
      '#delta' => 0,
      '#process' => array('nr_autocomplete_process'),
      '#autocomplete_path' => FALSE,
    ),
  );
}

/**
 * Implementation of hook_widget_settings().
 */
function nr_autocomplete_widget_settings($op, $widget) {
  switch ($op) {
    case 'form':
      $form = array();
      $match = isset($widget['autocomplete_match']) ? $widget['autocomplete_match'] : 'contains';
      if ($widget['type'] == 'nr_autocomplete') {
        $form['autocomplete_match'] = array(
          '#type' => 'select',
          '#title' => t('Autocomplete matching'),
          '#default_value' => $match,
          '#options' => array(
            'starts_with' => t('Starts with'),
            'contains' => t('Contains'),
          ),
          '#description' => t('Select the method used to collect autocomplete suggestions. Note that <em>Contains</em> can cause performance issues on sites with thousands of nodes.'),
        );
      }
      else {
        $form['autocomplete_match'] = array('#type' => 'hidden', '#value' => $match);
      }
      return $form;

    case 'save':
      return array('autocomplete_match');
  }
}

/**
 * Implementation of hook_widget().
 */
function nr_autocomplete_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $element = array(
    '#type' => $field['widget']['type'],
    '#default_value' => $items,
    '#value_callback' => 'nr_autocomplete_value',
  );
  return $element;
}

/**
 * Value for a nodereference autocomplete element.
 *
 * Substitute in the node title for the node nid.
 */
function nr_autocomplete_value($element, $edit = FALSE) {
  $names = array();
  $field_key  = $element['#columns'][0];
  foreach ($element['#default_value'] as $delta => $item) {
    if (!empty($item['nid'])) {
      $n = db_result(db_query(db_rewrite_sql('SELECT n.title FROM {node} n WHERE n.nid = %d'), $item['nid']));
      $names[] = nr_autocomplete_encode($n) . ' [nid:'. $item['nid'] .']';
    }
  }
  return array($field_key => implode(', ', $names));
}

/**
 * Process an individual element.
 *
 * Build the form element. When creating a form using FAPI #process,
 * note that $element['#value'] is already set.
 *
 */
function nr_autocomplete_process($element, $edit, $form_state, $form) {
  // The nodereference autocomplete widget doesn't need to create its own
  // element, it can wrap around the text_textfield element and add an autocomplete
  // path and some extra processing to it.
  // Add a validation step where the value can be unwrapped.
  $field_name = $element['#field_name'];
  $field = $form['#field_info'][$field_name];

  if (!$field['multiple']) {
    $autocomplete = 'nodereference/autocomplete/';
  }
  else {
    $autocomplete = 'nr_autocomplete/autocomplete/';
  }
  $field_key  = $element['#columns'][0];

  $element[$field_key] = array(
    '#type' => 'text_textfield',
    '#default_value' => isset($element['#value']) ? $element['#value'] : '',
    '#autocomplete_path' => $autocomplete . $element['#field_name'],
    // The following values were set by the content module and need
    // to be passed down to the nested element.
    '#title' => $element['#title'],
    '#required' => $element['#required'],
    '#description' => $element['#description'],
    '#field_name' => $element['#field_name'],
    '#type_name' => $element['#type_name'],
    '#delta' => $element['#delta'],
    '#columns' => $element['#columns'],
  );
  if (empty($element[$field_key]['#element_validate'])) {
    $element[$field_key]['#element_validate'] = array();
  }
  array_unshift($element[$field_key]['#element_validate'], 'nr_autocomplete_validate');

  // Used so that hook_field('validate') knows where to flag an error.
  $element['_error_element'] = array(
    '#type' => 'value',
    // Wrapping the element around a text_textfield element creates a
    // nested element, so the final id will look like 'field-name-0-nid-nid'.
    '#value' => implode('][', array_merge($element['#parents'], array($field_key, $field_key))),
  );
  return $element;
}

/**
 * Validate an autocomplete element.
 *
 * Remove the wrapper layer and set the right element's value.
 * This will move the nested value at 'field-name-0-nid-nid'
 * back to its original location, 'field-name-0-nid'.
 */
function nr_autocomplete_validate($element, &$form_state) {
  $field_name = $element['#field_name'];
  $type_name = $element['#type_name'];
  $field = content_fields($field_name, $type_name);
  $field_key = $element['#columns'][0];
  $value = $element['#value'][$field_key];
  $values = array();
  $nid = NULL;
  $typed_titles = nr_autocomplete_parse_input($value);
  foreach ($typed_titles as $delta => $item) {
    if (!empty($item)) {
      preg_match('/^(?:\s*|(.*) )?\[\s*nid\s*:\s*(\d+)\s*\]$/', $item, $matches);
      if (!empty($matches)) {
        // Explicit [nid:n].
        list(, $title, $nid) = $matches;        
        // Check for encoded and unencoded matches
        if (!empty($title) && ($n = node_load($nid)) && nr_autocomplete_encode($title) != $n->title && $title != $n->title) {
          form_error($element[$field_key], t('%name: title mismatch. Please check your selection.', array('%name' => t($field['widget']['label']))));
        }
        else {
          $values[] = array('nid' => $nid);
        }
      }
    }    
  }
  $new_parents = array();
  foreach ($element['#parents'] as $parent) {
    $value = $value[$parent];
    // Use === to be sure we get right results if parent is a zero (delta) value.
    if ($parent === $field_key) {
      $element['#parents'] = $new_parents;
      form_set_value($element, $values, $form_state);
      break;
    }
    $new_parents[] = $parent;
  }
}

/**
 * Implementation of hook_allowed_values().
 */
function nr_autocomplete_allowed_values($field) {
  $references = _nodereference_potential_references($field);

  $options = array();
  foreach ($references as $key => $value) {
    $options[$key] = $value['rendered'];
  }
  return $options;
}

/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 *
 * Unholy union of taxonomy.module's taxonomy_autocomplete() and
 * nodereference.module's nodereference_autocomplete().
 */
function nr_autocomplete_autocomplete($field_name, $string = '') {
  // The user enters a comma-separated list of nodes. We only autocomplete the last node.
  $array = drupal_explode_tags($string);
  // Fetch last node.
  $last_string = trim(array_pop($array));

  if ($last_string != '') {
    $fields = content_fields();
    $field = $fields[$field_name];
    $count = count($array);
    if ($count && empty($field['multiple'])) {
      drupal_json(array());
      return;
    }
    $match = isset($field['widget']['autocomplete_match']) ? $field['widget']['autocomplete_match'] : 'contains';
    $matches = array();

    $prefix = $count ? implode(', ', $array) . ', ' : '';

    $references = _nodereference_potential_references($field, $last_string, $match, array(), 10);
    foreach ($references as $id => $row) {
      $n = nr_autocomplete_encode($row['title']) . " [nid:$id]";
      // Add a class wrapper for a few required CSS overrides.
      $matches[$prefix . $n] = '<div class="reference-autocomplete">'. $row['rendered'] . '</div>';
    }
    drupal_json($matches);
  }
}

/**
 * Escapes commas and quotes in node titles.
 * 
 * Based on code found in taxonomy.module
 *
 * @param string $string
 *  String to encode
 * @return string
 *  Encoded string
 */
function nr_autocomplete_encode($string) {
  $n = $string;
  if (strpos($string, ',') !== FALSE || strpos($string, '"') !== FALSE) {
    $n = '"' . str_replace('"', '""', $string) . '"';
  }
  return $n;
}

/**
 * Returns array containing all of the typed node titles.
 *
 * @param string $typed_input
 *  What the user put into the autocomplete field
 * @return array
 *  Array containing each node title
 */
function nr_autocomplete_parse_input($typed_input) {
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $regexp = '%(?:^|,\ *)("(?>[^"]*)(?>""[^"]* )*"(?> [^",]*)|(?: [^",]*))%x';
  preg_match_all($regexp, $typed_input, $matches);
  return array_unique($matches[1]);
}

/**
 * Theme an individual textfield autocomplete element.
 */
function theme_nr_autocomplete($element) {
  return $element['#children'];
}
