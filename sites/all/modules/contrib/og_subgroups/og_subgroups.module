<?php

/**
 * @file
 * Maintains a hierarchy of groups created by the orgainc groups module.
 */

/**
 * Implementation of hook_perm().
 */
function og_subgroups_perm() {
    return array('administer groups hierarchy', 'edit groups hierarchy');
}

/**
 * Implementation of hook_menu().
 */
function og_subgroups_menu() {
  $items['admin/og/subgroups'] = array(
   'title' => 'Subgroups configuration',
   'page callback' => 'drupal_get_form', 
   'page arguments' => array('og_subgroups_settings'),
   'access arguments' => array('administer groups hierarchy'),
   'weight' => 1,
   'file' => 'og_subgroups.admin.inc',
   'file path' => drupal_get_path('module', 'og_subgroups'). '/includes',
  );

  return $items;
}

/**
 * Implementation of hook_menu_alter().
 */
function og_subgroups_menu_alter($items) {
  // Override OG's unsubscribe confirm form
  $items['og/unsubscribe/%node/%user']['page arguments'][0] = 'og_subgroups_confirm_unsubscribe';
}

/**
 * Menu callback function. Override OG's unsubscribe confirm form
 */
function og_subgroups_confirm_unsubscribe($form_state, $group_node, $account) {
  global $user;
  $directions = array_filter(variable_get('og_subgroups_propagate_members_unsubscribe', array()));
  $form = array();
  $tree = array();
  $additional_groups = array();

  if (!empty($directions)) {
    // Get all groups in the subgroup branch where the user is not the
    // group manager. Used for comparison
    $root = og_subgroups_get_all_family($group_node->nid, 'up');
    $branch = array($root[0]->gid);
    $groups = og_subgroups_get_all_family($root[0]->gid, 'down');
    foreach ($groups as $group) {
      if(!og_subgroups_is_group_manager($group->gid, $account->uid)) {
        $branch[] = $group->gid;
      }
    }

    // Get groups in the subgroups branch based upon propagation settings
    foreach ($directions as $direction) {
      $trees = og_subgroups_get_all_family($group_node->nid, $direction);
      foreach ($trees as $group) {
        $tree[$group->gid] = $group->title;
      }
    }

    // Remove groups that the user is not a member of
    $tree = array_intersect_key($tree, $account->og_groups);

    // Remove groups that the user is a Manager for. Managers cannot be
    // unsubscribed from groups
    foreach($tree as $gid => $title) {
      if(og_subgroups_is_group_manager($gid, $account->uid)) {
        unset($tree[$gid]);
      }
    }

    // Look for other groups within the same branch that the user may need
    // to be removed from.
    $additional_groups = array_intersect(array_diff($branch, array_keys($tree)), array_keys($account->og_groups));

    // Label the additional memberships
    foreach ($additional_groups as $key => $gid) {
      if ($gid != $group_node->nid) {
        $additional_groups[$gid] = $account->og_groups[$gid]['title'];
      }
      unset($additional_groups[$key]);
    }
  }

  if ($account->uid == $user->uid) {
    if (!empty($tree)) {
      $message = t('By leaving group %title, you will also be removed from the following groups: !groups', array('%title' => $group_node->title, '!groups' => theme_item_list($tree)));
    }
    else {
      $message = t('Are you sure you want to leave the group %title?', array('%title' => $group_node->title));
    }
    $additional_message = t('Due to subgroup membership propagation settings, you have additional memberships in the groups listed below.');
    $additional_checkbox_title = t('Remove yourself from these additional groups');
    $confirm_text = t("Leave");
  }
  else {
    if (!empty($tree)) {
      $message = t('By removing !name from the group %title, !name will also be removed from !groups', array('!name' => theme('username', $account), '%title' => $group_node->title, '!groups' => theme_item_list($tree)));
    }
    else {
      $message = t('Are you sure you want to remove !name from the group %title?', array('!name' => theme('username', $account), '%title' => $group_node->title));
    }

    $additional_message = t('Due to subgroup membership propagation settings, !name has additional memberships in the groups listed below.', array('!name' => theme('username', $account)));
    $additional_checkbox_title = t('Remove !name from these additional groups', array('!name' => theme('username', $account)));
    $confirm_text = t("Remove");
  }

  $form['group_node'] = array('#type' => 'value', '#value' => $group_node);
  $form['subgroup_nodes'] = array('#type' => 'value', '#value' => $tree);
  $form['account'] = array('#type' => 'value', '#value' => $account);
  $form['message'] = array(
    '#prefix' => '<div class="container-inline">',
    '#value' => $message,
    '#suffix' => '</div>',
  );

  $form['additional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional Memberships'),
    '#tree' => TRUE,
    '#description' => $additional_message,
    '#access' => !empty($additional_groups),
    '#tree' => TRUE,
  );

  $form['additional']['groups'] = array('#type' => 'value', '#value' => $additional_groups);

  $form['additional']['memberships']['display'] = array(
    '#value' => theme_item_list($additional_groups),
  );

  $form['additional']['memberships']['delete'] = array(
    '#type' => 'checkbox',
    '#title' => $additional_checkbox_title,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => $confirm_text,
  );

  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), $_SERVER['HTTP_REFERER']),
  );

  $form['#submit'] = array('og_subgroups_confirm_unsubscribe_submit');

  return $form;
}

/**
 * Submit handler
 *
 * @see og_subgroups_confirm_unsubscribe
 */
function og_subgroups_confirm_unsubscribe_submit($form, &$form_state) {
  $uid = $form_state['values']['account']->uid;
  $gid = $form_state['values']['group_node']->nid;
  $unsubscribe = array($gid => $form_state['values']['group_node']->title);

  // Add the subgroup nodes to the list of groups to unsubscribe from.
  if(!empty($form_state['values']['subgroup_nodes'])) {
    $unsubscribe += $form_state['values']['subgroup_nodes'];
  }

  // Add the additional groups to the list of groups to unsubscribe from.
  if ($form_state['values']['additional']['memberships']['delete']) {
    $unsubscribe += $form_state['values']['additional']['groups'];
  }

  // Unsubscribe user from each group
  foreach ($unsubscribe as $gid => $title) {
    og_delete_subscription($gid, $uid, array('og_subgroups' => TRUE));
  }

  drupal_set_message(t('%user was removed from: !groups', array('%user' => $form_state['values']['account']->name, '!groups' => theme_item_list($unsubscribe))));

  // Determine where to go next. GHP if accessible, or else site front page.
  $form_state['redirect'] = node_access('view', $form_state['values']['group_node']) ? "node/". $group_node->nid : '';
}

/**
 * Check if a user is the manager, or node author, of a particular group
 *
 * @param $gid
 *  the group or node id
 * @param $uid
 *  the user id to check
 */
function og_subgroups_is_group_manager($gid, $uid) {
  $sql = "SELECT count(*) FROM {node} n WHERE n.nid = %d and n.uid = %d";
  return (db_result(db_query($sql, $gid, $uid)));
}

/**
 * Implenentation of hook_form_alter().
 */
function og_subgroups_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form_id == $form['#node']->type .'_node_form') {
    $node = $form['#node'];
    if (og_is_group_type($node->type)) {
      // Add the subgroup fields to the node form
      $form = array_merge($form, og_subgroups_form($node));
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function og_subgroups_form_node_delete_confirm_alter(&$form, &$form_state) {
  $node = node_load($form['nid']['#value']);
  if (og_is_group_type($node->type)) {
    $inaccessible = og_subgroups_get_eligible_groups('inaccessible');
    $accessible = og_subgroups_get_eligible_groups('accessible');
    $options = og_subgroups_tree($accessible, $node->nid, $inaccessible);
    unset($options[0]);
    $form['target']['#options'] = $options;
  }
}

/** 
 * API function to set/ update groups hierarchy.
 * 
 * @param $op
 *  Define the operation 'insert' or 'update'.
 * @param $node
 *  The node object.
 * @param $parent_nid
 *  The node id of the group that will be the parrent
 * @param $validate
 *  Set to TRUE when a validation on the node and parent node is required.
 * @return 
 *  boolean indicating if operation preformed in case $validate is enabled.
 */
function og_subgroups_set_hierarchy($op, $node, $parent_nid, $validate = FALSE) {
  $valid = FALSE;
  if ($validate) {
    // Check node is a group type.
    if (og_is_group_type($node->type)) {
      // Get all accessible/ inaccesiable groups for the user.
      $options = og_subgroups_get_eligible_groups('accessible');
      $inaccessible = og_subgroups_get_eligible_groups('inaccessible');
      // Check parent_nid is a valid parent.
      if (array_key_exists($parent_nid, og_subgroups_tree($options, $node, $inaccessible))) {
        $valid = TRUE;
      }
      // Check if $op should be insert or update.
      $parent = og_subgroups_get_family($node->nid, 'up') ? $op = 'update' : $op = 'insert'; 
    }
  }
  else {
    $valid = TRUE;
  }
  if ($valid) {
    if ($op == 'insert') {
      db_query('INSERT INTO {og_subgroups} (gid, parent) VALUES (%d, %d)', $node->nid, $parent_nid);
      drupal_set_message(t('The subgroup has been set.'));
    }
    elseif ($op == 'update') {
      db_query('UPDATE {og_subgroups} SET parent = %d WHERE gid = %d', $parent_nid, $node->nid);
      drupal_set_message(t('The subgroup has been assigned a new parent.'));
    }
  }
  return $valid;
}

/** 
 * API function to remove a groups hierarchy.
 * 
 * @param $node
 *  The node object.
 */
function og_subgroups_remove_hierarchy($node) {
  db_query('DELETE FROM {og_subgroups} WHERE gid = %d', $node->nid); 
  drupal_set_message(t('The parent/child relationship has been removed.'));
}

function og_subgroups_access($node) {
  return ( og_is_group_admin($node) || user_access('edit groups hierarchy'));
}

/**
 * Implementation of hook_help().
 */
function og_subgroups_help($path, $arg) {
  switch ($path) {
    case 'admin/og/subgroups':
      return t('<p>The OG Subgroups module allows priviliged users to build group hierarchies.</p> 
                <p>Use the settings below to configure the propagation of content and users along the subgroup tree. 
                Propagation can happen up the tree (parents), down the tree (children), or sidways (siblings)</p>');
  }
}

/**
 * Implementation of hook_block().
 *
 * Displays the book table of contents in a block when the current page is a
 * single-node view inside a group context.
 */
function og_subgroups_block($op = 'list', $delta = 0) {
  $block = array();
  if ($op == 'list') {
    $block[0]['info'] = t('Subgroups');
    return $block;
  }
  else if ($op == 'view') {
    // Only display this block when the user is browsing inside a group:
    $arg = arg(1);
    if ($group_node = og_get_group_context()) {
      $block['subject'] = t('Subgroups');
      $inaccessible = og_subgroups_get_eligible_groups('inaccessible');
      $block['content'] = og_subgroups_menu_tree($group_node->nid, $group_node->title, $inaccessible);
    }

    return $block;
  }
}

/**
 * Given a node, this function returns an array of 'group node' objects
 * representing the path in the subroups tree.
 *
 * @param $node
 *   A group node object for which to compute the path.
 *
 * @return
 *   An array of group node objects representing the path nodes root to
 *   parent of the given node. Returns an empty array if the node does
 *   not exist or is not part of a subgroup.
 */
function og_subgroups_get_all_family($gid, $direction, $nodes = array()) {
  // Get the syblings by getting the group parent and then its children.
  if ($direction == 'side') {
    $family = og_subgroups_get_family($gid, 'up');
    $family = og_subgroups_get_family($family[0]->gid, 'down');
  }
  else {
    $family = og_subgroups_get_family($gid, $direction);
  }
  
  if ($family[0]->gid) {
    if ($direction == 'up') {
      $nodes = og_subgroups_get_all_family($family[0]->gid, $direction, $nodes);
      $nodes[] = $family[0];
    }
    
    else {
      foreach ($family as $group) {
        // We get the result for syblings, no need to recurse.
        $nodes[] = $group;
        if ($direction == 'down') {
          $nodes = og_subgroups_get_all_family($group->gid, $direction, $nodes);
        }
      }
    }
  }
  return $nodes;
}


/**
 * Implementation of hook_nodeapi().
*/
function og_subgroups_nodeapi($node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'load':
      if (og_is_group_type($node->type)) {
        $parent = og_subgroups_get_family($node->nid, 'up');
        $parent[0]->gid ? $node->og_subgroups = $parent[0]->gid : NULL;
      }
      break;
    case 'insert':
      if ($node->og_subgroups['parent']) {
        og_subgroups_set_hierarchy('insert', $node, $node->og_subgroups['parent']);
      }

      $groups = og_get_node_groups($node);
      if ($groups) {
        $content_directions = variable_get('og_subgroups_propagate_content', array());
        og_subgroups_propagate_content($node, $groups, $content_directions);
      }
      break;
    case 'update':
      // Get the original parent value
      $original_parent = og_subgroups_get_family($node->nid, 'up');

      if (empty($original_parent) && $node->og_subgroups['parent']) {
        og_subgroups_set_hierarchy('insert', $node, $node->og_subgroups['parent']);
      }
      else if ($original_parent[0]->gid != $node->og_subgroups['parent']) {
        ($node->og_subgroups['parent'] == 0) ? og_subgroups_remove_hierarchy($node) : og_subgroups_set_hierarchy('update', $node, $node->og_subgroups['parent']);
      }

      $groups = og_get_node_groups($node);
      if ($groups) {
        $content_directions = variable_get('og_subgroups_propagate_content', array());
        og_subgroups_propagate_content($node, $groups, $content_directions);
      }
      break;
    case 'delete':
      if (og_is_group_type($node->type)) {
        db_query('DELETE FROM {og_subgroups} WHERE gid = %d', $node->nid);
      }
  }
}

/**
 * Implementation of hook_og().
 */
function og_subgroups_og($op, $gid, $uid, $args = array()) {
  // Don't propgate in the middle of propagation action.
  if (!$args['og_subgroups']) {
    switch ($op) {
      case 'user insert':
        og_subgroups_propagate_user($gid, $uid, $args);
        break;
      case 'user update':
        og_subgroups_propagate_user($gid, $uid, $args); 
        break;
      case 'user delete': 
        og_subgroups_propagate_user_removal($gid, $uid, $args); 
        break;
    }
  }
}

/**
 * Get the parent/ children for a given group node id.
 * 
 * @param $gid
 *   The group id.
 * @param $direction
 *   The direction along the subgroups tree (up/ down, side).
 * 
 * @return 
 *   Array with the parent/ children group id.
 */
function og_subgroups_get_family($gid, $direction) {
  $return = array();
  if ($direction == 'up') { 
    $sql_gid = "SELECT ogh.parent AS gid FROM {node} n INNER JOIN {og_subgroups} ogh ON n.nid = ogh.gid WHERE n.nid = %d";
  }
  else {
    $sql_gid = "SELECT ogh.gid FROM {node} n INNER JOIN {og_subgroups} ogh ON n.nid = ogh.parent WHERE n.nid = %d";
  }
  $sql_title = "SELECT title FROM {node} WHERE nid = %d";
  $family_gid = db_query($sql_gid, $gid);
  while ($result_gid = db_fetch_object($family_gid)) {
    $family_title = db_query($sql_title, $result_gid->gid);  
    $result_title = db_fetch_object($family_title);
    $return[] = (object)array(
      'gid' => $result_gid->gid, 
      'title' => $result_title->title,
     );
   
  }
  return $return;
}

/**
 * Helper function to get the accessible and inaccessiable groups.
 * 
 * @param $op
 *   The operation
 */
function og_subgroups_get_eligible_groups($op) {
  $eligible_groups = array('accessible' => array(), 'inaccessible' => array());
  foreach (og_all_groups_options() as $gid => $title) {
    if (!og_subgroups_is_private($gid) || og_is_group_member($gid)) {
      $eligible_groups['accessible'][$gid] = $title;
    }
    else {
      $eligible_groups['inaccessible'][$gid] = $gid;
    }
  }

  $return = array();
  switch ($op) {
    case 'accessible':
      $return = $eligible_groups['accessible'];
      break;
    case 'inaccessible':
      $return = $eligible_groups['inaccessible'];
  }
  return $return;
}

/**
 * Retrieve the og_private value from the db.
 * 
 * @param $gid
 *  the group or node id
 * @return boolean
 *  TRUE if the group is private, FALSE if not.
 *
 * This value is stored in the node ($node->og_private) but performing
 * a node_load on a bunch of subgroups is expensive, so looking up the value
 * directly from the DB.
 */
function og_subgroups_is_private($gid) {
  $sql = "SELECT og.og_private FROM {og} og WHERE og.nid = %d";
  return (bool)db_result(db_query($sql, $gid));
}

/**
 * Implementation of function og_subgroups_outline()
 * Handles all subgroups outline operations.
 */
function og_subgroups_form($node) {
  // Get all accessible/ inaccesiable groups for the user.
  $options = og_subgroups_get_eligible_groups('accessible');
  $inaccessible = og_subgroups_get_eligible_groups('inaccessible');
  
  $description = t('The parent group for this group node.');
  if ($inaccessible) {
    $description .= '<br/>'. t("There are some groups which are inaccesible to you and their names appears as &lt;private group&gt;.");
  }
  
  $form['og_subgroups'] = array(
    '#type' => 'fieldset',
    '#title' => t('Subgroups'),
    '#description' => t('Position groups under one another to create a subgroup hierarchy'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#tree' => TRUE,
    '#access' => og_subgroups_access($node),
  );

  if (module_exists('og_subgroups_hs')) {
    // If array, then node is being previewed.
    $default = (is_array($node->og_subgroups)) ? $node->og_subgroups['parent'] : $node->og_subgroups;
    $form['og_subgroups']['parent'] = array(
      '#type' => 'hierarchical_select',
      '#title' => t('Parent'),
      '#size' => 1,
      '#config' => array(
        'module' => 'og_subgroups_hs',
        'params' => array(
          'nid' => (isset($node->nid)) ? $node->nid : NULL,
        ),
        'save_lineage'    => 0,
        'enforce_deepest' => 0,
        'entity_count'    => 0,
        'resizable'       => 0,
      ),
      '#default_value' => $default,
      '#description' => $description,
    );
  }
  else {
    $form['og_subgroups']['parent'] = array(
      '#type' => 'select',
      '#title' => t('Parent'),
      '#default_value' => $node->og_subgroups,
      '#options' => og_subgroups_tree($options, $node->nid, $inaccessible),
      '#description' => $description,
    );
  }

  return $form;
}

/**
 * Returns an array of titles and groups nids in tree hiearachy order.
 * 
 * @param $groups
 *   All the accessible groups.
 * @param $exclude
 *   The current group id that shouldn't appear in the subgroups.
 * @param $inaccessible
 *   All the inaccessible groups.
 * @param $indent
 *   The indention to be used.
 * 
 */
function og_subgroups_tree($groups, $exclude, $inaccessible , $indent = '') {
  $tree = array();
  $tree[0] = '<'. t('top-level') .'>'; 
  foreach ($groups as $key => $group) {
    // Start recurse only from top level groups.
    $parent = og_subgroups_get_all_family($key, 'up'); 
    
    // Get the top level parent of a group.
    if ($parent[0]->gid) {
      $gid = $parent[0]->gid;
      $title = $parent[0]->title;
    }
    // Group is already a top level.
    else {
      $gid = $key; 
      $title = $group;
    }
    // Set the top level group. Make sure the gid is part of the accessible groups.
    if (empty($tree[$gid]) && $gid != $exclude) {
      !in_array($gid, $inaccessible) ? $tree[$gid] = $title : $tree[$gid] = t('<private group>');
      $tree = og_subgroups_tree_recurse($gid, $exclude, $inaccessible, $tree, $indent .'--');
    }

  }
  return $tree;
}

/**
 * Helper function for og_subgroups_tree().
 */
function og_subgroups_tree_recurse($gid, $exclude, $inaccessible, $tree, $indent) {
  $children = og_subgroups_get_family($gid, 'down'); 
  foreach ($children as $node) {
    if ($node->gid != $exclude) {
      !in_array($node->gid, $inaccessible) ? $title = $node->title : $title = ('<private group>');
      $tree[$node->gid] = $indent .' '. $title;
      $tree = og_subgroups_tree_recurse($node->gid, $exclude, $inaccessible, $tree, $indent .'--');
    }
  }
  return $tree;
}

/**
 * Returns an HTML nested list (wrapped in a menu-class div) representing 
 * the group nodes as a tree.
 * 
 * @param $gid
 *   The group id.
 * @param $title
 *   The title of the group the node belongs to.
 * 
 * @return 
 *   Menu class nested list. 
 */
function og_subgroups_menu_tree($gid, $title, $inaccessible) {
  // Get the top level.
  $top = og_subgroups_get_all_family($gid, 'up');
  
  // Group might be already top-level.
  if (empty($top[0])) {
    $top[0]->gid = $gid;
    $top[0]->title = $title;
  }

  // Get children of the top level.
  $tree = og_subgroups_menu_tree_recurse($top[0]->gid, $inaccessible);
  // We always have the top level group.
  !in_array($top[0]->gid, $inaccessible) ? $title = l($top[0]->title, 'node/'. $top[0]->gid) : $title = check_plain(t('<private group>'));
  $tree ? $output .= '<ul class="menu"><li class="expanded">' : $output .= '<ul class="menu"><li class="leaf">';
  $output .= $title;
  $tree ? $output .= '<ul class="menu">'. $tree .'</ul>' :NULL;
  $output .= '</ul></li>';     
 
  return $output;
}

/**
 * Helper function for og_subgroups_menu_tree()
 */
function og_subgroups_menu_tree_recurse($gid, $inaccessible, $children = array()) {
  $children = og_subgroups_get_family($gid, 'down');
  foreach ($children as $node) {
    // Check if group is inaccessible for user.
    !in_array($node->gid, $inaccessible) ? $title = l($node->title, 'node/'. $node->gid) : $title = check_plain(t('<private group>'));
    if ($tree = og_subgroups_menu_tree_recurse($node->gid, $inaccessible, $children)) {
      $output .= '<li class="expanded">';
      $output .= $title;
      $output .= '<ul class="menu">'. $tree .'</ul>';
      $output .= '</li>';
    }
    else {
      $output .= '<li class="leaf">'. $title .'</li>';
    }
  }
  return $output;
}

/**
* Propagates content along the subgroups tree.
* 
* @param $node
*  The node object that needs to be propagated
* @param $groups
*  The groups the node is currently assigend to
* @param $directions
*  Array with the direction propagation should happen (parent, children, syblings)
*
*/
function og_subgroups_propagate_content($node, $groups, $directions) {
  $save = FALSE;
  $directions = array_filter($directions);
  foreach ($directions as $direction) {
    foreach ($groups as $group => $foo) {
      // Get the path to the top level group.
     $trees = og_subgroups_get_all_family($group, $direction);
     foreach ($trees as $tree) {
       // Check that group isn't already there.
       $save = TRUE;
       if (!in_array($tree->gid, $node->og_groups)) {
         $node->og_groups[] = $tree->gid;
         $node->og_groups_both[$tree->gid] = $tree->title;   
       }
     }
    }
  }   
 // Save node only if changed.
 if ($save) {
   og_save_ancestry($node);
 }
}
  
/**
* Propagates members and admins along the subgroups tree.
* 
* @param $gid
*   The group id.
* @param $uid
*   The propagated user id. 
* @param $args
*   Array with the updated action, as returned from hook_og()
*
*/
function og_subgroups_propagate_user($gid, $uid, $args) {
  $demote = variable_get('og_subgroups_propagate_demote', array());

  // User's membership was approved.
  // User was promoted to group admin.
  // User was demoted from admin and demote action should occur.
  if ($args['is_active'] == 1 || $args['is_admin'] == 1 || (isset($args['is_admin']) && $args['is_admin'] == 0 && $demote['remove_admin'])) {
    $tree = _og_subgroups_propagate_user_get_tree($gid, 'subscribe');
    $user = user_load(array('uid' => $uid));
    $args['is_admin'] ? $is_admin = 1 : $is_admin = 0;
    foreach ($tree as $gid => $foo) {
      // Check user isn't already subscribed with same rights.
      if (empty($user->og_groups[$gid]) || $user->og_groups[$gid]['is_active'] != 1 || $user->og_groups[$gid]['is_admin'] != $is_admin) {
        // Pass in the $args info about propagation done by og_subgroups module.
        og_save_subscription($gid, $uid, array('is_active' => 1, 'is_admin' => $is_admin, 'og_subgroups' => TRUE));
      }
    }
  } 
}

function og_subgroups_propagate_user_removal($gid, $uid) {
  $demote = variable_get('og_subgroups_propagate_demote', array());
  if ($demote['unsubscribe']) {
    $tree = _og_subgroups_propagate_user_get_tree($gid, 'unsubscribe');

    $user = user_load(array('uid' => $uid));
    foreach ($tree as $gid => $foo) {
      // Check user isn't the manager of the group.
      $sql = "SELECT uid FROM {node} WHERE nid = %d";
      $manager_uid = db_fetch_object(db_query($sql, $gid));
      if ($uid != $manager_uid->uid) {
        og_delete_subscription($gid, $uid, array('og_subgroups' => TRUE));
      }
      
    }
  }
}

/** 
* Helper function for og_subgroups_propagate_user().
* 
* @param $gid
*   The group id. 
* @return 
*   Array with the group nids for propagation.
*/
function _og_subgroups_propagate_user_get_tree($gid, $action = 'subscribe') {
  $tree = array();
  $directions = array();
  switch ($action) {
    case 'subscribe':
      $directions = variable_get('og_subgroups_propagate_members', array());
      break;
    case 'unsubscribe':
      $directions = variable_get('og_subgroups_propagate_members_unsubscribe', array());
  }

  foreach ($directions as $direction) {
    if ($direction) {  
      // Get the groups member should be propagated.
      $trees = og_subgroups_get_all_family($gid, $direction);
      foreach ($trees as $group) {
        $tree[$group->gid] = $group->title;
      }   
    }
  }
  return $tree; 
}

/**
 * API function that gets all of the root level groups, 
 * groups that don't have parents.
 *
 * @return
 *  Array with nid as the key and title as the value
 */
function og_subgroups_get_root() {
  $root_level = array();
  $sql = "SELECT n.nid, n.title
          FROM {node} n
          INNER JOIN {og} g ON n.nid = g.nid
          WHERE g.nid NOT IN (select gid from {og_subgroups})
            AND n.status = 1
            AND g.og_private = 0
          ORDER BY n.title";

  if ($result = db_query($sql)) {
    while ($row = db_fetch_object($result)) {
      $root_level[$row->nid] = check_plain($row->title);
    }
  }

  return $root_level;
}

/**
 * API function that gets all of the child groups for a particular parent.
 *
 * @param $parent 
 *  The nid of the parent
 *
 * @param $exclude
 *  Array of node ids to exclude from returned children
 *
 * @return
 *  Array with nid as the key and title as the value
 */
function og_subgroups_get_children($parent, $exclude = array()) {
  $children = array();
  
  if (empty($exclude)) {
    // Get all child groups
    $sql = "SELECT n.nid, n.title
      FROM {node} n
      INNER JOIN {og} g ON n.nid = g.nid
      INNER JOIN {og_subgroups} sg ON g.nid = sg.gid
      WHERE n.status = 1
        AND sg.parent = %d
      ORDER BY n.title";
    
    $result = db_query($sql, $parent);
  }
  else {
    // Get all child groups except the ones listed in $exclude
    $placeholders = implode(', ', array_fill(0, count($exclude), "%d"));
    $sql = "SELECT n.nid, n.title
      FROM {node} n
      INNER JOIN {og} g ON n.nid = g.nid
      INNER JOIN {og_subgroups} sg ON g.nid = sg.gid
      WHERE n.status = 1
        AND sg.parent = %d
        AND sg.gid NOT IN ($placeholders)
      ORDER BY n.title";
    
    $result = db_query($sql, $parent, implode(',', $exclude));
  }

  if ($result) {
    while ($row = db_fetch_object($result)) {
      $children[$row->nid] = check_plain($row->title);
    }
  }

  return $children;
}

/**
 * API function that gets the parent for a particular group.
 *
 * @param $gid 
 *  The group id
 *
 * @return
 *  An array containing the gid and title, or FALSE if no parent exists
 */
function og_subgroups_get_parent($gid) {
  $sql = "SELECT sub.parent gid, n.title FROM {og_subgroups} sub INNER JOIN {node} n ON sub.parent = n.nid WHERE gid = %d;";
  return db_fetch_array(db_query($sql, $gid));
}

/**
 * API function that counts the child groups for a particular parent.
 *
 * @param $parent 
 *  The nid of the parent
 *
 * @param $exclude
 *  Array of node ids to exclude from the count
 *
 * @return
 *  int Number of child groups
 */
function og_subgroups_count_children($parent, $exclude = array()) {
  if (empty($exclude)) {
    // Count all child groups
    $result = db_query("SELECT COUNT(sg.gid) FROM {og_subgroups} sg WHERE sg.parent = %d", $parent);
  }
  else {
    // Count all child groups except the ones listed in $exclude
    $placeholders = implode(', ', array_fill(0, count($exclude), "%d"));
    $result = db_query("SELECT COUNT(sg.gid) FROM {og_subgroups} sg WHERE sg.parent = %d AND sg.gid NOT IN ($placeholders)", $parent, implode(',', $exclude));
  }

  return (int)db_result($result);
}

/**
 * Implementation of hook_views_api().
 */
function og_subgroups_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'og_subgroups') . '/includes',
  );
}

/**
 * Implementation of hook_token_values().
 */
function og_subgroups_token_values($type, $object = NULL, $options = array()) {
  $gid = NULL;
  if ($type == 'node') {
    // If this is a group node, then the group id is the node id
    if (og_is_group_type($object->type)) {
      $gid = $object->nid;
    }
    // Otherwise, check group membership
    if (!empty($object->og_groups) && is_array($object->og_groups)) {
      $gids = array_filter($object->og_groups);
      if (!empty($gids)) {
        $gid = array_shift($gids);
      }
    }
    
    // Set some defaults so that tokens will be emptied for nodes with no group affiliations
    $tokens['subgroups-parent'] = '';
    $tokens['subgroups-parent-raw'] = '';
    $tokens['subgroups-parent-id'] = '';
    $tokens['subgroups-parent-alias'] = '';
    $tokens['subgroups-grandparent'] = '';
    $tokens['subgroups-grandparent-raw'] = '';
    $tokens['subgroups-grandparent-id'] = '';
    $tokens['subgroups-path'] = '';
    $tokens['subgroups-path-raw'] = '';
    $tokens['subgroups-path-id'] = '';
  }
  if(isset($gid)) {
    $node = $object;
    $parent = og_subgroups_get_family($gid, 'up');
    $grandparent = og_subgroups_get_family($parent[0]->gid, 'up');
    $ancestry = og_subgroups_get_all_family($gid, 'up');
    $id = array();
    $path = array();
    $path_raw = array();

    foreach ($ancestry as $ancestor) {
      $id[] = $ancestor->gid;
      $path[] = check_plain($ancestor->title);
      $path_raw[] = $ancestor->title;
    }

    // Set the token.
    $tokens['subgroups-parent'] = check_plain($parent[0]->title);
    $tokens['subgroups-parent-raw'] = $parent[0]->title;
    $tokens['subgroups-parent-id'] = $parent[0]->gid;
    $tokens['subgroups-parent-alias'] = drupal_get_path_alias('node/'. $parent[0]->gid);
    $tokens['subgroups-grandparent'] = check_plain($grandparent[0]->title);
    $tokens['subgroups-grandparent-raw'] = $grandparent[0]->title;
    $tokens['subgroups-grandparent-id'] = $grandparent[0]->gid;
    $tokens['subgroups-path'] = !empty($options['pathauto']) ? $path : implode('/', $path);
    $tokens['subgroups-path-raw'] = !empty($options['pathauto']) ? $path_raw : implode('/', $path_raw);
    $tokens['subgroups-path-id'] = !empty($options['pathauto']) ? $id : implode(',', $id);

    return $tokens;
  }
}

/**
 * Implementation of hook_token_list().
 */
function og_subgroups_token_list($type = 'all') {
  if ($type == 'node' || $type == 'all') {
    $tokens['node']['subgroups-parent'] = t('Node title of the parent group');
    $tokens['node']['subgroups-parent-raw'] = t('Unfiltered node title of the parent group - raw user input');
    $tokens['node']['subgroups-parent-id'] = t('Node ID of the parent group');
    $tokens['node']['subgroups-parent-alias'] = t('URL alias for the parent group.');
    $tokens['node']['subgroups-grandparent'] = t('Node title of the parent of the parent group');
    $tokens['node']['subgroups-grandparent-raw'] = t('Unfiltered node title of the parent of the parent group - raw user input');
    $tokens['node']['subgroups-grandparent-id'] = t('Node ID of the parent of the parent group');
    $tokens['node']['subgroups-path'] = t('Node titles of all parent groups in a path format');
    $tokens['node']['subgroups-path-raw'] = t('Unfiltered node titles of all parent groups in a path format - raw user input');
    $tokens['node']['subgroups-path-id'] = t('ID of all parent groups above this group, separated with commas.');

    return $tokens;
  }
}
